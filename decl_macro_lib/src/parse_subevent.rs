#[macro_export]
macro_rules! parse_subevent { 
    // Ignore subevent and event tokens
    ($name:ident { $($body:tt)* };) => {
        // there should not be any encodes or struct definitions here.
        // Here shall be only pure declarations, no `for` loops.
        // in the format of composite types: 
        // `` name = type(gen_id = gen_val, ...); `` 
        let mut __s = String::new();
        __s += "#include \"structures.hh\"";
        let mut __s = String::new();
        let __file_name = format!("{}.subev", stringify!($name));
        let mut __file = File::create(&__file_name)?;
        __s += "/*\n";
        __s += &format!("Below is autogenerated structure: {}\n", stringify!($name));
        __s += &format!("Do not edit these definitions!\n");
        __s += "*/\n\n";
        __s += &format!("#ifndef __GO4_UNPACK_SUBEVENT_{}_HH__\n", stringify!($name)); 
        __s += &format!("#define __GO4_UNPACK_SUBEVENT_{}_HH__\n", stringify!($name)); 
        __s += &format!("class __{} {{\n", stringify!($name));

        // Create fields:
        __s += &parse_fields!(@$($body)* );

        // Create a default ctor
        __s += &formatt!(1; "{}() = default;\n\n", stringify!($name));

        // Create an `init()` method that initializes MEMBERs and calls `init()` of underlying fields 
        __s += &formatt!(1; "void init() {{\n");
        __s += &parse_init!(@$($body)* );
        __s += &formatt!(1; "}}\n\n");
 
        // Create check_event() method: 
        __s += "\n";
        __s += &formatt!(1; "void check_event() {{\n");
        __s += &formatt!(2; "bool __b = 1;\n");
        __s += &parse_condition!( $name $($body)*);
        __s += &formatt!(2; "return __b;\n");
        __s += &formatt!(1; "}}\n\n");

        // Create fill() method:
        __s += &formatt!(1; "void fill(uint8_t* __event_handle, size_t& bytes_available, size_t& bytes_read) {{\n");
        __s += &formatt!(2; "bytes_read = 0;\n");
        __s += &formatt!(2; "size_t bytes_read_sub = 0;\n");
        __s += &parse_fill!(@$($body)* );
        __s += &formatt!(1; "}}\n\n"); 

        // Create clear() method:
        __s += &formatt!(1; "void clear() {{\n");
        __s += &parse_clear!(@$($body)*);
        __s += &formatt!(1; "}}\n"); 

        __s += &format!("}};\n");
        __s += &format!("#endif /* __GO4_UNPACK_STRUCTURE_{}_HH__ */", stringify!($name)); 
        __s += "\n\n";
        __file.write(__s.as_bytes())?;

    };
    () => {};
}

